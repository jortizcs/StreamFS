{
  "name": "JASON",
  "version": "0.1.3",
  "main": "index.js",
  "description": "JSON-like parser/formatter to pass objects between processes and/or threads",
  "author": {
    "name": "Jorge Chamorro Bieling",
    "email": "jorge@jorgechamorro.com"
  },
  "homepage": "https://github.com/xk/JASON",
  "bugs": {
    "url": "http://github.com/xk/JASON/issues",
    "email": "jorge@jorgechamorro.com"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/xk/JASON.git"
  },
  "contributors": [
    {
      "name": "// JASON Authors ordered by first contribution."
    },
    {
      "name": "2011-12-04 Jorge Chamorro Bieling",
      "email": "jorge@jorgechamorro.com"
    },
    {
      "name": "2012-01-26 Bruno Jouhier",
      "email": "bjouhier@gmail.com"
    },
    {
      "name": "2012-02-09 Brandon Benvie",
      "email": "brandon@bbenvie.com"
    }
  ],
  "readme": "## JASON\n\nJASON is just like JSON, but with an A. D'oh. ^U\n\nJASON is just like JSON, but unlike JSON it can:\n\n* serialize objects with methods\n* serialize objects with cyclic references\n* understand Dates, Regexps, Booleans, etc, and restore them with `.parse()` with their proper types/classes.\n* understand and serialize all the JS primitives, including `undefined`\n* properly recreate the holes in Arrays\n\nJASON lets you pass objects as text between processes and/or threads.\n\nWarning: unlike JSON, JASON is *unsafe*. You should only use it in contexts where you have strong guarantees that the strings that you pass to the JASON parser have been produced by a JASON formatter from a trusted source.\n\n## Syntax\n\nJASON syntax is just plain JavaScript (but not JSON). \n\nThe `stringify` function does the clever work of generating whatever Javascript is needed to recreate the object, and the `parse` function is just a call to `eval`.\n\n## Examples\n\nSee the `test/test01.js` file.\n\n## API\n\n``` javascript\nvar JASON = require(\"JASON\");\n\nstr = JASON.stringify(obj);\nobj = JASON.parse(str);\n```\n\n# Installation\n\nThe easiest way to install `JASON` is with NPM:\n\n```sh\nnpm install JASON\n```\n\n# Caveats\n\nJASON won't capture any free vars' values in the serializations. If a JASON serialization contains any functions or methods that contain references to free vars (any other than the built-in globals), most of the times bad things will happen, unless the referenced free vars exist as well and are in scope in the context in which the serialization is JASON.parse()d (the global context), or unless the serialization is eval()ed in a context in which said references exist and are in scope.\n\nFor example here `pi` is a free var:\n\n``` javascript\nvar txt= JASON.stringify(function () { return pi });\n```\n\nSo this usually won't work:\n\n``` javascript\nJASON.parse(txt)();\n\nReferenceError: pi is not defined\n```\n\nunless there's a `pi` var in scope:\n\n``` javascript\nvar pi= 3.14;\nJASON.parse(txt)();\n\n3.14\n```\n\n## License\n\nThis work is licensed under the [MIT license](http://en.wikipedia.org/wiki/MIT_License).\n",
  "_id": "JASON@0.1.3",
  "dist": {
    "shasum": "5361f6582d5544a47cb6e5f3e5715726a0046f4a"
  },
  "_from": "JASON"
}
