// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protoservice.proto

#ifndef PROTOBUF_protoservice_2eproto__INCLUDED
#define PROTOBUF_protoservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/service.h>
// @@protoc_insertion_point(includes)

namespace pwd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protoservice_2eproto();
void protobuf_AssignDesc_protoservice_2eproto();
void protobuf_ShutdownFile_protoservice_2eproto();

class EntriesRequest;
class Entry;
class EntriesResponse;

// ===================================================================

class EntriesRequest : public ::google::protobuf::Message {
 public:
  EntriesRequest();
  virtual ~EntriesRequest();
  
  EntriesRequest(const EntriesRequest& from);
  
  inline EntriesRequest& operator=(const EntriesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EntriesRequest& default_instance();
  
  void Swap(EntriesRequest* other);
  
  // implements Message ----------------------------------------------
  
  EntriesRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EntriesRequest& from);
  void MergeFrom(const EntriesRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:pwd.EntriesRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_protoservice_2eproto();
  friend void protobuf_AssignDesc_protoservice_2eproto();
  friend void protobuf_ShutdownFile_protoservice_2eproto();
  
  void InitAsDefaultInstance();
  static EntriesRequest* default_instance_;
};
// -------------------------------------------------------------------

class Entry : public ::google::protobuf::Message {
 public:
  Entry();
  virtual ~Entry();
  
  Entry(const Entry& from);
  
  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Entry& default_instance();
  
  void Swap(Entry* other);
  
  // implements Message ----------------------------------------------
  
  Entry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Entry& from);
  void MergeFrom(const Entry& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);
  
  // optional int32 gid = 3;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 3;
  inline ::google::protobuf::int32 gid() const;
  inline void set_gid(::google::protobuf::int32 value);
  
  // optional string home = 4;
  inline bool has_home() const;
  inline void clear_home();
  static const int kHomeFieldNumber = 4;
  inline const ::std::string& home() const;
  inline void set_home(const ::std::string& value);
  inline void set_home(const char* value);
  inline void set_home(const char* value, size_t size);
  inline ::std::string* mutable_home();
  inline ::std::string* release_home();
  
  // optional string shell = 5;
  inline bool has_shell() const;
  inline void clear_shell();
  static const int kShellFieldNumber = 5;
  inline const ::std::string& shell() const;
  inline void set_shell(const ::std::string& value);
  inline void set_shell(const char* value);
  inline void set_shell(const char* value, size_t size);
  inline ::std::string* mutable_shell();
  inline ::std::string* release_shell();
  
  // @@protoc_insertion_point(class_scope:pwd.Entry)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_home();
  inline void clear_has_home();
  inline void set_has_shell();
  inline void clear_has_shell();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 gid_;
  ::std::string* home_;
  ::std::string* shell_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_protoservice_2eproto();
  friend void protobuf_AssignDesc_protoservice_2eproto();
  friend void protobuf_ShutdownFile_protoservice_2eproto();
  
  void InitAsDefaultInstance();
  static Entry* default_instance_;
};
// -------------------------------------------------------------------

class EntriesResponse : public ::google::protobuf::Message {
 public:
  EntriesResponse();
  virtual ~EntriesResponse();
  
  EntriesResponse(const EntriesResponse& from);
  
  inline EntriesResponse& operator=(const EntriesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EntriesResponse& default_instance();
  
  void Swap(EntriesResponse* other);
  
  // implements Message ----------------------------------------------
  
  EntriesResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EntriesResponse& from);
  void MergeFrom(const EntriesResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .pwd.Entry entry = 1;
  inline int entry_size() const;
  inline void clear_entry();
  static const int kEntryFieldNumber = 1;
  inline const ::pwd::Entry& entry(int index) const;
  inline ::pwd::Entry* mutable_entry(int index);
  inline ::pwd::Entry* add_entry();
  inline const ::google::protobuf::RepeatedPtrField< ::pwd::Entry >&
      entry() const;
  inline ::google::protobuf::RepeatedPtrField< ::pwd::Entry >*
      mutable_entry();
  
  // @@protoc_insertion_point(class_scope:pwd.EntriesResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::pwd::Entry > entry_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_protoservice_2eproto();
  friend void protobuf_AssignDesc_protoservice_2eproto();
  friend void protobuf_ShutdownFile_protoservice_2eproto();
  
  void InitAsDefaultInstance();
  static EntriesResponse* default_instance_;
};
// ===================================================================

class Pwd_Stub;

class Pwd : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Pwd() {};
 public:
  virtual ~Pwd();
  
  typedef Pwd_Stub Stub;
  
  static const ::google::protobuf::ServiceDescriptor* descriptor();
  
  virtual void GetEntries(::google::protobuf::RpcController* controller,
                       const ::pwd::EntriesRequest* request,
                       ::pwd::EntriesResponse* response,
                       ::google::protobuf::Closure* done);
  
  // implements Service ----------------------------------------------
  
  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Pwd);
};

class Pwd_Stub : public Pwd {
 public:
  Pwd_Stub(::google::protobuf::RpcChannel* channel);
  Pwd_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~Pwd_Stub();
  
  inline ::google::protobuf::RpcChannel* channel() { return channel_; }
  
  // implements Pwd ------------------------------------------
  
  void GetEntries(::google::protobuf::RpcController* controller,
                       const ::pwd::EntriesRequest* request,
                       ::pwd::EntriesResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Pwd_Stub);
};


// ===================================================================


// ===================================================================

// EntriesRequest

// -------------------------------------------------------------------

// Entry

// optional string name = 1;
inline bool Entry::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Entry::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Entry::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Entry::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Entry::name() const {
  return *name_;
}
inline void Entry::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Entry::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Entry::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Entry::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Entry::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 uid = 2;
inline bool Entry::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Entry::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Entry::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Entry::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 Entry::uid() const {
  return uid_;
}
inline void Entry::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// optional int32 gid = 3;
inline bool Entry::has_gid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Entry::set_has_gid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Entry::clear_has_gid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Entry::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
inline ::google::protobuf::int32 Entry::gid() const {
  return gid_;
}
inline void Entry::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
}

// optional string home = 4;
inline bool Entry::has_home() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Entry::set_has_home() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Entry::clear_has_home() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Entry::clear_home() {
  if (home_ != &::google::protobuf::internal::kEmptyString) {
    home_->clear();
  }
  clear_has_home();
}
inline const ::std::string& Entry::home() const {
  return *home_;
}
inline void Entry::set_home(const ::std::string& value) {
  set_has_home();
  if (home_ == &::google::protobuf::internal::kEmptyString) {
    home_ = new ::std::string;
  }
  home_->assign(value);
}
inline void Entry::set_home(const char* value) {
  set_has_home();
  if (home_ == &::google::protobuf::internal::kEmptyString) {
    home_ = new ::std::string;
  }
  home_->assign(value);
}
inline void Entry::set_home(const char* value, size_t size) {
  set_has_home();
  if (home_ == &::google::protobuf::internal::kEmptyString) {
    home_ = new ::std::string;
  }
  home_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Entry::mutable_home() {
  set_has_home();
  if (home_ == &::google::protobuf::internal::kEmptyString) {
    home_ = new ::std::string;
  }
  return home_;
}
inline ::std::string* Entry::release_home() {
  clear_has_home();
  if (home_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = home_;
    home_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string shell = 5;
inline bool Entry::has_shell() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Entry::set_has_shell() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Entry::clear_has_shell() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Entry::clear_shell() {
  if (shell_ != &::google::protobuf::internal::kEmptyString) {
    shell_->clear();
  }
  clear_has_shell();
}
inline const ::std::string& Entry::shell() const {
  return *shell_;
}
inline void Entry::set_shell(const ::std::string& value) {
  set_has_shell();
  if (shell_ == &::google::protobuf::internal::kEmptyString) {
    shell_ = new ::std::string;
  }
  shell_->assign(value);
}
inline void Entry::set_shell(const char* value) {
  set_has_shell();
  if (shell_ == &::google::protobuf::internal::kEmptyString) {
    shell_ = new ::std::string;
  }
  shell_->assign(value);
}
inline void Entry::set_shell(const char* value, size_t size) {
  set_has_shell();
  if (shell_ == &::google::protobuf::internal::kEmptyString) {
    shell_ = new ::std::string;
  }
  shell_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Entry::mutable_shell() {
  set_has_shell();
  if (shell_ == &::google::protobuf::internal::kEmptyString) {
    shell_ = new ::std::string;
  }
  return shell_;
}
inline ::std::string* Entry::release_shell() {
  clear_has_shell();
  if (shell_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = shell_;
    shell_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// EntriesResponse

// repeated .pwd.Entry entry = 1;
inline int EntriesResponse::entry_size() const {
  return entry_.size();
}
inline void EntriesResponse::clear_entry() {
  entry_.Clear();
}
inline const ::pwd::Entry& EntriesResponse::entry(int index) const {
  return entry_.Get(index);
}
inline ::pwd::Entry* EntriesResponse::mutable_entry(int index) {
  return entry_.Mutable(index);
}
inline ::pwd::Entry* EntriesResponse::add_entry() {
  return entry_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pwd::Entry >&
EntriesResponse::entry() const {
  return entry_;
}
inline ::google::protobuf::RepeatedPtrField< ::pwd::Entry >*
EntriesResponse::mutable_entry() {
  return &entry_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pwd

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protoservice_2eproto__INCLUDED
